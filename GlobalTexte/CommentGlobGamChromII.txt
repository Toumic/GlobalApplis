# GlobGamChrom : Traiter le chromatisme original pour le traduire en commatisme
'''Plusieurs dictionnaires ont été créés, en voici quelques uns :
# dic_maj = Référence des tonalités majeures primaires
	Je rappelle que les tonalités sont découvertes avec la comparaison majeure.
# tab_inf et tab_sup = Tableaux des altérations (de 1 à 24)
'''
# Les fonctions nécessaires :
def transposer(rip0, rip1, rip2, rip3): Créer les majeures absentes dans dic_maj
"""Ici, on réceptionne les gammes qui ont leurs tonices altérées.
    Séquences du traitement : - Obtenir la gamme majeure signée ou non signée.
     - Transposer la gamme au niveau altéré. - Résoudre la tonalité.
    Rip0.1 = Huit notes. Rip2.3 = Cinq notes.☺
    Pour transposer les notes de la gamme (Rip0.1)
    Pour transposer les notes chromatiques (Rip2.3)"""
def alteration(signe): Pour un retour en nombre réel (±), le signe plus le niveau
"""Permet d'obtenir la valeur numérique réelle de l'altération
    Quand le signe est dans tab_sup = Valeur(+ et son rang(index))
    Quand le signe est dans tab_inf = Valeur(- et son rang(index))"""
def chromatic(a, b, c, s): Accès principal de réception des paramètres depuis GlobGamVers6
"""Fonction chromatique afin de soulager le code GlobGamVers6
    Définitions :
    A = Gamme hepta en cours
    B = Nom de la tonalité analogique
    C = Tonalité numérique ordre croissant
    S = Degré d'inversion demandé ou donné par défaut"""
# Définition de l'enregistrement
'''Mettre en forme les données pour qu'elles s'adaptent au retour.
    Dessin de la table (gamme en cours):
        dic_ana[1] = [('Altération', 'C')], dic_ana[2] = [(('+', 'C'), ('-', 'D'))]
            La note.        # c_rip0 = Altération sur la note naturelle(gamme)(#/b)
            La note.        # c_rip1 = La note naturelle de la gamme en cours(C)
            Le supérieur.   # c_rip1 = Note chromatique du rang supérieur ('-', 'D')
            L'inférieur.    # c_rip2 = Note chromatique du rang inférieur ('+', 'C')
            La tonalité.    # c_rop2 = Valeur numérique de la tonalité
            dic_rip0, dic_rip1, dic_rip2, dic_rip3 = {}, {}, {}, {}'''
for yep in range(1, 13):  # Mesurer dic_ana[yep](notes:gamme ou chrome)
'''Le cycle yep sépare les notes de la gamme de celles qui sont chromatiques'''
for yes in range(1, 13):  # Lecture des séquences chromatiques
'''Phase de renseignement de la matrice (yep)'''
	# Section rip0_1 = Qui appartient aux notes de la gamme en cours
	# Section rip0_2. Section rip1_3 = Les notes d'appartenance chromatique
'''# Phase de renseignement des degrés modaux'''
for yi in range(1, 12):  # Mise en forme pour un mode diatonique
	'''Niveau des extensions (8, 9, 10, 11, 12, 13, 14)'''
	if (int(deg_ava) in extension) or (int(deg_sui) in extension): pass
		# deg_ava = Ligne supérieure de la tonalité numérique (1, 2, b3, 4, #5, 6, 7), degré avant.
		# deg_sui = Ligne inférieure de la tonalité numérique (1, #2, 3, 4, 5, b6, 7), degré suivant.
		'''Définition des variables
			dif_bas = Différence (demande/état) = Nouveau signe
			deg_ba0(1). sig_ba0(1) = Signe altératif de not_bas(gam_abc) en extension
			sig_nu0(1). sig_nu0(1) = Suivre num_ava(dic_inv[yes]) pour extension
			à suivre = Les lignes à suivre num_ava(dic_inv[yes]) num_sui(dic_inv[yes + 1])
			rng_ba0(1). rng_nu0(1) = Signes recueillis. Signes à suivre en extension'''
	# Résolution des extensions (8, 9, 10, 11, 12, 13, 14), présentes aux octaves voisines
	'''Ligne supérieure des degrés à suivre: dic_inv[yes][yi]'''
	if len(not_ava) > 1 and int(deg_ava) not in extension: pass
	'''Ligne inférieure des degrés à suivre: dic_inv[yes + 1][yi]'''
	if len(not_sui) > 1 and int(deg_sui) not in extension: pass
	elif int(deg_sui) not in extension: pass
		# not_sui = Note majeure non signée INF à modifier
	(lineno(), 'GGC/SUP result1:', result1, '*******tab_sup********')
	# Séquence d'affichage pour d'éventuelles corrections
            # Ci-dessous.
            if yi == 12:  # Normalement(yi == 11). Et yi = 12 est improbable.
                print(lineno(), '***** Résultat progressif par cycle ***** yi:', yi, '****** yes:', yes)
                print(lineno(), 'GGC/dic_inv[yes][yi]:\t', yes, dic_inv[yes][:yi + 1], '*yi:', yi)
                if yes in dic_rip0.keys():
                    print(lineno(), 'GGC/dic_rip0[yes]:\t\t', yes, dic_rip0[yes])
                    print(lineno(), 'GGC/dic_rip1[yes]:\t\t', yes, dic_rip1[yes])
                elif yes in dic_rip2.keys():
                    print(lineno(), 'GGC/dic_rip2[yes]:\t\t', yes, dic_rip2[yes])
                    print(lineno(), 'GGC/dic_rip3[yes]:\t\t', yes, dic_rip3[yes])
                if yes != 13:  # Lecture totale limitée à 12 (yes)
                    print(lineno(), 'GGC/dic_inv[yes+1][yi]:\t', yes, dic_inv[yes + 1][:yi + 1], '*yi:', yi)
                print(lineno(), '___________________________________________Fin de cycle yi:', yi)
            if yes == 12 and yi == 12:  # Lecture totale limitée à 12/12 (yes)/(yi)
                break
'''639 ***** Résultat progressif par cycle ***** yi: 11 ****** yes: 1
640 GGC/dic_inv[yes][yi]:	 1 ['1', '-2', '2', '-3', '3', '4', '-5', '5', '-6', '6', '-7', '7'] *yi: 11
642 GGC/dic_rip0[yes]:		 1 ['C', '-D', 'D', '-E', 'E', 'F', '-G', 'G', '-A', 'A', '-B', 'B']
643 GGC/dic_rip1[yes]:		 1 ['C', '-D', 'oE', '-E', '-F', 'F', '-G', 'oA', '-A', 'oB', '-B', '-C']
648 GGC/dic_inv[yes+1][yi]:	1 ['1', '-2', 'o3', '-3', '-4', '4', '-5', 'o6', '-6', 'o7', '-7', '-8'] *yi: 11
649 ___________________________________________Fin de cycle yi: 11'''

	'''Tous les dic_rip's ont été initialisés selon la dictée numérique.
    Maintenant, on passe à l'épisodique récupération des diatoniques commatiques.
    . :   Suivre les colonnes une par une en commençant par la tonique la plus rapprochée de celle de la 1ère colonne.
    . :   Une fois sélectionnée, la tonique se construit avec les notes de sa propre colonne.
    En ce moment le traçage récolte (la tonique, le nom de la gamme, la graduation)'''
	# Ligne 706 : Lecture des colonnes absentes pour trouver les toniques fondamentales
    (lineno(), 'Cas3 ABSENCES dic_abs:', dic_abs)
    for cas_duc in dic_abs.keys():
        (lineno(), 'GGC/ton_un:', ton_un, '\n', dic_maj[ton_un])
	# Enregistrement des toniques absentes dans dic_cas et dans dic_maj, par la fonction transposer()
	# def transposer(rip0, rip1, rip2, rip3):
	print(lineno(), 'cas_cas:', cas_cas)
	# 804 cas_cas: ['+B', 'oD', '^A', '-*E', 'o*F', 'x^G', '-**G', '+^^F', 'x^^E', '***A', '+^^^D',
	# 'o***B', 'C', '^^^^C']
	'''cas_cas = Liste les notes diatoniques altérées jusqu'en position tonique'''
	'''.../ Rechercher les toniques des gammes absentes.'''
		if key in dic_rip0.keys():
			cas_sos = dic_rip0[key][cas_duc[1]], dic_rip1[key][cas_duc[1]], 'cas0'
			# cas_sos a les données dic_rip0.1 : Conteneur chromatique ()
			(lineno(), 'cas_sos:', cas_sos, 'key:', key, '...... Key in dic_rip0.keys()')
			'''815 cas_sos: ('E', '-F', 'cas0') key: 1 ...... Key in dic_rip0.keys()
			815 cas_sos: ('+F', '-G', 'cas0') key: 3 ...... Key in dic_rip0.keys()
			815 cas_sos: ('+G', '+G', 'cas0') key: 5 ...... Key in dic_rip0.keys()'''
	# Appel de fonction transposer avec passage de paramètres sans retour
	('__ __ Transposer trip', lineno(), '___ ___ Suite rip:', tripe0, tripe1, tripe2, tripe3)
	# transposer(tripe0, tripe1, tripe2, tripe3) : Voir ligne 8
# Dictionnaire des tonalités majeures complètement renseigné.
(lineno(), 'dic_maj.keys():', dic_maj.keys())
'''858 dic_maj.keys(): dict_keys(['C', 'D', 'E', 'F', 'G', 'A', 'B', '-D', '+C', '-E', '+D', '-G', '+F', '-A', '+G', '-B', '+A', 'oD', '+B'])'''
#
''' Ici, nous connaissons les gammes commatiques qui sont impliquées au commatisme.
	Nous utilisons un dictionnaire modulaire des situations isolées ou couplées.
	Quand une note est isolée, elle n'a pas de parallélisme chromatique.
	Par définition la note isolée est intégrée à la gamme diatonique, hors contexte chromatique.'''
# , dic_rap0, dic_rap2 = Modules de transport diatonique, des lignes supérieures et inférieures.
    # cap0[num_sup], cap1[not_sup], cap2[not_inf], cap3[num_inf]
    # dic_cap0, dic_cap1, dic_cap2, dic_cap3
    for ik in range(12):
        # Initialiser la nouvelle clef du dictionnaire.
		'''Sortie des mises en forme des relatives majeures. ²La tonique fait la tonalité²
           En référencement aux tableaux des tonalités majeures[(bas, haut), (not_iso0, not_iso1, not_iso2)]
        Zone détaillant les notes[Signe, note, tonique, degré, tonalité]
            Formatage = alteration (Signe) + Tables (dic_maj[Notes. Intervalles], gam_abc[Notes])'''
		#
        '''# Exécution du traitement diatonique (num + note).
            Le premier cycle a donné les principales valeurs diatoniques.
            Le développement diatonique modal de la gamme commatique énoncée.
            De sa position chromatique réelle ou son emplacement diatonique.'''
        (lineno(), 'dic_cap0:', dic_cap0)
        for dia in range(1, 13):  # VERSIONS NUMÉRIQUES DES DEGRÉS MODAUX
            # dic_cap0[ik], dic_cap3[ik] = Parties numériques[inf/sup].
            # dic_cap1[ik], dic_cap2[ik] = Parties analogiques[inf/sup].
			'''# Compare s'il n'y a pas de couplage chromatique.'''
			if dic_rap0[ik][dia] == dic_rap2[ik][dia]:  # Les notes (sup/inf) sont identiques.
				not_gam.append(dic_rap2[ik][dia])  # not_gam = Note tonique de la gamme
				# Les notes iso font prioritairement partie du lot heptatonique.
			else:  # Les notes (sup/inf) sont différentes.
			''' PARTIES DU CODE INUTILISÉ POUR L'INSTANT'''
''' Exemple de premier mode commatique
1021 ik: 1 dic_cap0[ik]: ['1', '*3', '*4', '-3', '*5', '4', '*6', 'o6', '*7', '^^^1', '-7', '^^^2']
1022 ik: 1 dic_cap1[ik]: ['+B', '-D', 'oE', '+D', '-F', '+E', '-G', 'G', '-A', 'oB', '+A', '-C']
1023 ik: 1 dic_cap2[ik]: ['C', '-D', 'xC', '-E', 'xD', 'F', '+F', 'G', '-A', 'xG', '-B', 'xA']
1024 ik: 1 dic_cap3[ik]: ['1', '-2', 'x1', '-3', 'x2', '4', '+4', '5', '-6', 'x5', '-7', 'x6'] 
1038 not_gam: ['-D', 'G', '-A'] Les notes isolées appartiennent à une gamme fondamentale.
1039 ... ;'''
				# La gamme est composée de ['-D', 'G', '-A']
			# OUT OF DIATONIC
